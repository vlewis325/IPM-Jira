from jira import JIRA
from pandas import pd

options = {
		'server': 'https://jira.5amsolutions.com'
}
jira = JIRA(options, basic_auth=(" ", " "))

issue_list = jira.search_issues("project=PFIZ",maxResults=1000)
Status = [issue.fields.status.name for issue in issue_list]
status_dict={"Status":Status}

issues_dict={"issue ID": [], "status":[], "resolution":[], "created_date":[], "resolutiondate":[]}
for issue in issue_list:
    issues_dict["issue ID"].append(issue.id)
    issues_dict["status"].append(issue.fields.status.name)
    issues_dict["created_date"].append(issue.fields.created)
    if issue.fields.status.name == "Open":
        issues_dict["resolutiondate"].append(None)
    else:        
        issues_dict["resolutiondate"].append(issue.fields.resolutiondate)
    try:
        issues_dict["resolution"].append(issue.fields.resolution.name)
    except:
        issues_dict["resolution"].append("Unresolved")
        
df=pd.DataFrame.from_dict(issues_dict)
#for looking at the data
df.groupby(["status", "resolution"]).count()

#check open status with resolution dates
df[(df["status"]=="Open") & (df["resolutiondate"]is not None)]

#how the status is binned
my_dict={"Open":["Gather Requirements","In Progress", "In Progress (QA)", "Ready for Dev", "Reopened", "Open", "Ready for Approval", "Approved for Planning"], "Closed":["Done", "Closed", "Resolved"]}


def mapping_function(status):
    """It takes the status in my_dict and returns the bin"""
    for key in my_dict:
        values= my_dict[key]
        if status in values:
            return key
 #take status
#look in dict for the item whose value contains that status
#return key of that value

#bin statuses
df["bin status"]=df.status.apply(mapping_function)

df.groupby("bin status").count()
